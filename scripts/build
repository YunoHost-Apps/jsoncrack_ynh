#!/bin/bash

#=================================================
# THIS BUILD SCRIPT REQUIRES:
# |= RAM: ~4GB 
# |= Disk space: ~1.5GB 
# |= Time (depends on hardware): ~00:00:00
#=================================================

#=================================================
# SECTION TO EDIT
#=================================================

function ynh_manually_defined_package_variables {
    #=================================================
    # VARIABLES TO DEFINE MANUALLY (REQUIRED)
    #=================================================
    ynh_owner="Yunohost-Apps"       # YNH repo owner (it only supports GitHub for now) - e.g. "YunoHost-Apps".
    ynh_repo="jsoncrack_ynh"        # YNH repo name - e.g. "jsoncrack_ynh".
    upstream_branch="main"          # name of the upstream branch to get the source from - often "main".
    source_type="commit"            # "commit" or "release", depending on whether you want the build script to build the source based on the latest commit or on the latest release.
    default_build_folder="out"      # the folder where to find the built files after build - often "dist".
    framework="nodejs"              # framework that should be installed - currently only "nodejs" or "none" are supported.
    build_nodejs_version=20         # NodeJS version to use (if any) for the build.
    gh_personal_token=""            # [local build only] fill with your GitHub Personal Token if you want to upload the release to GitHub after build - cf. https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/managing-your-personal-access-tokens
}

function ynh_optional_source_customizations {
    #=================================================
    # SOURCE CUSTOMIZATION COMMANDS (OPTIONAL)
    #=================================================
    # Remove calls to premium (support encouraged via 'fund' parameter in the manifest.toml)
    sed -i '/<Button/{:Loop;N;/\n\s*<\/Button>/!bLoop;/todiagram.com/d}' "./src/features/editor/Toolbar/index.tsx"       # Remove call to Premium (removes block delimited with START='{!isWidget' and END='\n\s*)}' which contains TARGET='todiagram.com').
    sed -i '/setVisible/d' "./src/features/editor/Toolbar/index.tsx"                                                     # Remove now unused var
    sed -i '/ExternalMode/d' "./src/pages/editor.tsx"                                                                    # Remove call for premium when executed not from official domain
    sed -i 's/\(NEXT_PUBLIC_NODE_LIMIT=\)[0-9]*/\199999999/g' ".env"                                                     # Extend graph nodes default limit (would that limit be reached, call for premium will be displayed)
    sed -i 's/maxSize={300/maxSize={1024/g' "./src/features/editor/FullscreenDropzone.tsx"                               # Extend file size upload limitation
    sed -i 's/(Max file size: 300 KB)/(Max file size: 1 MB)/g' "./src/features/editor/FullscreenDropzone.tsx"            # Extend file size upload limitation
    sed -i 's/maxSize={500/maxSize={1024/g' "./src/features/modals/ImportModal/index.tsx"                                # Extend file size upload limitation
    sed -i 's/(Max 500 KB)/(Max 1 MB)/g' "./src/features/modals/ImportModal/index.tsx"                                   # Extend file size upload limitation
    
    # Prepare $domain$path replacement
    sed -i '/const config =/a \ \ basePath: "\/__YNH_SUBDIR_PATH__",' "./next.config.js"
    sed -i 's/\/editor/\/__YNH_SUBDIR_PATH__\/editor"/g' "./public/manifest.json"
    sed -i 's/assets/\/__YNH_SUBDIR_PATH__\/assets"/g' "./public/manifest.json"
    sed -i 's/jsoncrack.com/__YNH_DOMAIN____YNH_SUBDIR_PATH__/g' "./src/constants/seo.ts"
    sed -i 's/"\/manifest.json"/"\/__YNH_SUBDIR_PATH__\/manifest.json"/g' "./src/constants/seo.ts"
    sed -i 's/"\/favicon.ico"/"\/__YNH_SUBDIR_PATH__\/favicon.ico"/g' "./src/constants/seo.ts"
    sed -i 's/Link href="\/"/Link href="\/editor"/g' "./src/layout/JsonCrackLogo.tsx"
    sed -i 's/"\/assets/"\/__YNH_SUBDIR_PATH__\/assets/g' "./src/layout/JsonCrackLogo.tsx"
    sed -i 's/"\/assets/"\/__YNH_SUBDIR_PATH__\/assets/g' "./src/features/editor/LiveEditor.tsx"
    sed -i 's/"\/assets/"\/__YNH_SUBDIR_PATH__\/assets/g' "./src/features/editor/views/GraphView/index.tsx"
    
    # Adapt text for YNH context
    sed -i 's/jsoncrack.com/JSON_graph/g' "./src/features/modals/DownloadModal/index.tsx"                      # Default download filename  
    sed -i '/already notified/d' "./src/pages/_error.tsx"                                                      # Delete deceptive speech now Sentry is going to be disabled 
    sed -i 's/Don&apos;t worry, our development team was/Try refreshing the page./g' "./src/pages/_error.tsx"  # Delete deceptive speech now Sentry is going to be disabled 
    
    # Remove Google Analytics (user tracking)
    sed -i '/NEXT_PUBLIC_GA_MEASUREMENT_ID/d' "./.env"
    sed -i '/nextjs-google-analytics/d' "./package.json"
    sed -i '/GoogleAnalytics/d' "./src/pages/_app.tsx"
    sed -Ei '/IS_PROD/,+1 d' "./src/pages/_app.tsx"
    sed -i 's/ onClick={() => gaEvent("show_tools_menu")}//g' "./src/features/editor/Toolbar/ToolsMenu.tsx"         # Delete part of line containing 'gaEvent'
    sed -i 's/ onClick={() => gaEvent("show_view_menu")}//g' "./src/features/editor/Toolbar/ViewMenu.tsx"           # Delete part of line containing 'gaEvent'
    sed -i 's/ onClick={() => gaEvent("show_zoom_menu")}//g' "./src/features/editor/Toolbar/ZoomMenu.tsx"           # Delete part of line containing 'gaEvent'
    sed -i '/gaEvent("toggle_expand_collapse", {/,/});/d' "./src/features/editor/views/GraphView/OptionsMenu.tsx"   # Delete part of line containing 'gaEvent' (full block to avoid compilation error)
    gaEvent_list=$(grep -rl 'gaEvent' "./src") && echo $gaEvent_list | xargs sed -i '/gaEvent/d'                    # Delete complete lines containing 'gaEvent' for files located in src/*

    # Disable Sentry (error tracking linked to the app's official instance) --> Doesn't seem enough to avoid calls to Sentry's website so we prefer to remove completely for now
    #~ sed -i 's/process.env.NODE_ENV === "production"/false/g' "./sentry.client.config.ts"

    # Remove Sentry (error tracking)
    sed -i '/sentry/d' "./package.json"
    sed -i '/@sentry/d' "./next.config.js"
    #~ sed -i '/const sentryConfig/,+14d' "./next.config.js"
    #~ sed -i 's/sentryConfig/bundleAnalyzerConfig/' "./next.config.js"
    #~ sed -i '/Sentry/d' "./src/data/terms.json" --> Upstream terms page is not used in YNH package at the moment  
    rm "./sentry.client.config.ts"
    rm "./sentry.edge.config.ts"
}

function ynh_build_instructions {
    #=================================================
    # BUILD INSTRUCTIONS (REQUIRED)
    #=================================================
    corepack enable pnpm && corepack prepare pnpm@9.1.4 --activate && pnpm install --no-frozen-lockfile
    COREPACK_ENABLE_DOWNLOAD_PROMPT=0 pnpm exec next telemetry disable
    pnpm run lint:fix
    pnpm run build
}

#=================================================
# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
#=================================================
# YOU SHOULD NOT NEED TO EDIT WHAT FOLLOWS 
#=================================================
# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
#=================================================

#=================================================
# HELPERS
#=================================================
# Measure disk space use
function used_disk_space_in_gb {
  output=$(df -Ph . | awk 'NR==2 {print $3}')
  output=${output%G}
  echo $output
}

# Start tracing for debug output
set -x
storage_start=$(used_disk_space_in_gb)

#=================================================
# VARIABLES
#=================================================

# Declare variables filled in manually
ynh_manually_defined_package_variables

# Parse manifest automatically
curl --silent --output ynh-manifest.toml "https://raw.githubusercontent.com/${ynh_owner}/${ynh_repo}/refs/heads/master/manifest.toml"
upstream_url="$(grep -A 5 'resources.sources.main' ynh-manifest.toml | grep url | grep -o 'http[s]\?://[^ "]\+' | head -1)"
upstream_owner="$(echo $upstream_url | cut -d/ -f4)"
upstream_repo="$(echo $upstream_url | cut -d/ -f5)"
rm ynh-manifest.toml

#=================================================
# DOWNLOAD AND EXTRACT SOURCE
#=================================================
full_upstream_path="${upstream_owner}/${upstream_repo}"
if [[ $source_type == "release" ]]; then
    last_upstream_version=$(curl --silent "https://api.github.com/repos/${full_upstream_path}/releases/latest" | grep -Po "(?<=\"tag_name\": \").*(?=\")") #e.g. v3.2.0 (but format is manually defined by repo upstream authors and could be anything)
    download_url="https://api.github.com/repos/${full_upstream_path}/tarball/${last_upstream_version}"
    build_folder="${upstream_repo}_${last_upstream_version}" #e.g. jsoncrack.com_v3.2.0
    release_version="${last_upstream_version}"
else
    last_upstream_version=$(curl --silent "https://api.github.com/repos/${full_upstream_path}/commits/${upstream_branch}" | grep -Po "(?<=\"sha\": \").*(?=\")" | head -n 1) #e.g. d5f9bfc7fba1f1908863390f16ba28589d84a7d5
    last_upstream_version_short=${last_upstream_version:0:8}
    last_date_tag=$(curl --silent "https://api.github.com/repos/${full_upstream_path}/commits/${upstream_branch}" | grep -Po "(?<=\"verified_at\": \").*(?=\")" | head -n 1) #e.g. 2024-11-19T18:37:03Z
    last_date_tag_short=$(echo ${last_date_tag:0:10} | sed 's/-/./g') #e.g. 2024.11.19
    download_url="https://github.com/${full_upstream_path}/archive/${last_upstream_version}.tar.gz"
    build_folder="${upstream_repo}_v${last_date_tag_short}-${last_upstream_version_short}" #e.g. jsoncrack.com_v2024.11.19-d5f9bfc7
    release_version="${build_folder#${upstream_repo}_}"
fi
curl -LJ $download_url --output "${build_folder}.tar.gz"
mkdir "$build_folder"
tar --strip-components=1 -xvf "${build_folder}.tar.gz" -C "./${build_folder}/"
storage_extract_source=$(used_disk_space_in_gb)

#=================================================
# SOURCE CUSTOMIZATION
#=================================================
# Optional source customizations @MANUAL FILL 
pushd "$build_folder"
    # Execute source customizations commands (if any)
    ynh_optional_source_customizations
popd
storage_source_customization=$(used_disk_space_in_gb)

#=================================================
# INSTALL BUILD FRAMEWORK
#=================================================
# NodeJS - Install required version
current_node_version=$(node -v | cut -c 2- | cut -c 1-${#build_nodejs_version})
if [ "$framework" = "nodejs" ] && [ "$current_node_version" != "$build_nodejs_version" ]; then

    # Install NVM if it is not already installed
    if [ "nvm" != $(command -v nvm) ]; then
        curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.40.3/install.sh | bash #Official install script from https://github.com/nvm-sh/nvm#install--update-script
    fi
    
    # Instlal required NodeJS version 
    source ~/.nvm/nvm.sh install $build_nodejs_version
fi

storage_install_build_framework=$(used_disk_space_in_gb)

#=================================================
# BUILD FROM SOURCE
#=================================================
ynh_release_filename="${build_folder}_ynh.zip"
pushd "$build_folder"

    # Execute build instructions
    ynh_build_instructions

    # Package   
    mv "${default_build_folder}" "${ynh_repo}"
    zip -r $ynh_release_filename "${ynh_repo}"
    mv $ynh_release_filename "../${ynh_release_filename}"
    
popd
ynh_release_SHA=$(sha256sum ${ynh_release_filename} | cut -d' ' -f1)
ynh_release_URL="https://github.com/${ynh_owner}/${ynh_repo}/releases/download/${release_version}/${ynh_release_filename}"
ynh_release_version="${release_version#${upstream_repo}_}" #e.g. v3.2.0 (release source) OR v2024.11.19-d5f9bfc7 (commit source)
storage_end=$(used_disk_space_in_gb)

# Compute disk usage statistics
total_storage_used=$((storage_end-storage_start))
total_storage_used_without_framework=$((storage_end-storage_install_build_framework+storage_source_customization))
echo "Total disk space used after build: $total_storage_used GB (or $total_storage_used_without_framework GB without $framework)"

# Clean build folder
rm -r "${build_folder}"
rm "${build_folder}.tar.gz"

#=================================================
# GENERATE CHANGELOG URL (COMMITS HISTORY)
#=================================================
# Get previous commit SHA-1 string
previous_upstream_filename=${upstream_url##*/}
previous_upstream_filename=${previous_upstream_filename%.tar.gz}
previous_upstream_filename=${previous_upstream_filename%.zip}
if [[ "$previous_upstream_filename" =~ ^[0-9a-f]{40}$ ]] #check if filename is a SHA-1 string or a tag
then 
previous_release_commit_SHA_full=${previous_upstream_filename}
else
previous_release_commit_SHA_full=$(curl --silent "https://api.github.com/repos/${full_upstream_path}/git/refs/tags/" | jq -r ".[] | select(.ref==\"refs/tags/${previous_upstream_filename}\") | .object.sha") 
fi
previous_release_commit_SHA_short=${previous_release_commit_SHA_full:0:8}

# Get current commit SHA-1 string
if [[ "$ynh_release_version" =~ ^v[0-9]{4}\.[0-9]{2}\.[0-9]{2}-[0-9a-f]{8}$ ]] #check if it has commit (predictable) or release (unpredictable) format.
then
current_release_commit_SHA_short=${ynh_release_version##*-}
else
current_release_commit_SHA_full=$(curl --silent "https://api.github.com/repos/${full_upstream_path}/git/refs/tags/" | jq -r ".[] | select(.ref==\"refs/tags/${ynh_release_version}\") | .object.sha") 
current_release_commit_SHA_short=${current_release_commit_SHA_full:0:8}
fi

# Create final URL
ynh_release_diff_url="https://github.com/${full_upstream_path}/compare/${previous_release_commit_SHA_short}...${current_release_commit_SHA_short}"

#=================================================
# UPLOAD RELEASE (LOCAL BUILD ONLY)
#=================================================
if [[ $gh_personal_token && -z $GITHUB_OUTPUT ]]; then
    
    echo "Trying to upload the release to https://github.com/${ynh_owner}/${ynh_repo}/releases/ ..."

    if [[ "$@" =~ "push_release" ]]; then
        ## Make a draft release json with a markdown body
        release='"tag_name": "'$last_upstream_version'", "target_commitish": "master", "name": "'$last_upstream_version'", '
        body="${upstream_repo^} prebuilt archive for ${ynh_repo}\\n=========\\nPlease refer to upstream ${upstream_repo^} project for the change : https://github.com/$full_upstream_path/releases\\n\\nSha256sum : $ynh_release_SHA"
        body=\"$body\"
        body='"body": '$body', '
        release=$release$body
        release=$release'"draft": true, "prerelease": false'
        release='{'$release'}'
        url="https://api.github.com/repos/$ynh_owner/$ynh_repo/releases"
        succ=$(curl -H "Authorization: token $gh_personal_token" --data "$release" $url)

        ## In case of success, we upload a file
        upload_generic=$(echo "$succ" | grep upload_url)
        if [[ $? -eq 0 ]]; then
            echo "Release created."
        else
            echo "Error creating release!"
            return
        fi

        # $upload_generic is like:
        # "upload_url": "https://uploads.github.com/repos/:owner/:repo/releases/:ID/assets{?name,label}",
        upload_prefix=$(echo $upload_generic | cut -d "\"" -f4 | cut -d "{" -f1)
        upload_file="$upload_prefix?name=$ynh_release_filename"

        echo "Start uploading first file"
        i=0
        upload_ok=false
        while [ $i -le 4 ]; do
            i=$((i+1))
            # Download file
            set +e
            succ=$(curl -H "Authorization: token $gh_personal_token" \
                -H "Content-Type: $(file -b --mime-type $ynh_release_filename)" \
                -H "Accept: application/vnd.github.v3+json" \
                --data-binary @$ynh_release_filename $upload_file)
            res=$?
            set -e
            if [ $res -ne 0 ]; then
                echo "Curl upload failled"
                continue
            fi
            echo "Upload done, check result"

            set +eu
            download=$(echo "$succ" | egrep -o "browser_download_url.+?")
            res=$?
            if [ $res -ne 0 ] || [ -z "$download" ]; then
                set -eu
                echo "Result upload error"
                continue
            fi
            set -eu
            echo "$download" | cut -d: -f2,3 | cut -d\" -f2
            echo "Upload OK"
            upload_ok=true
            conclusion_msg="Build completed and successfully uploaded."
            break
        done

        if ! $upload_ok; then
            conclusion_msg="Build completed but not uploaded - upload failed."
        fi
    fi    
elif [[ -z $gh_personal_token && -z $GITHUB_OUTPUT ]]; then
    conclusion_msg="Build completed but not uploaded - missing Github Token."
fi

#=================================================
# EXPORT VARIABLES FOR GITHUB WORKFLOW (GITHUB WORKFLOW ONLY)
#=================================================

if [[ $GITHUB_OUTPUT ]]; then 
    echo "YNH_RELEASE_FILE=${ynh_release_filename}" >> $GITHUB_OUTPUT
    echo "YNH_RELEASE_SHA=${ynh_release_SHA}" >> $GITHUB_OUTPUT
    echo "YNH_RELEASE_URL=${ynh_release_URL}" >> $GITHUB_OUTPUT
    echo "YNH_RELEASE_VERSION=${ynh_release_version}" >> $GITHUB_OUTPUT
    echo "YNH_RELEASE_DIFF_COMPARE_URL=${ynh_release_diff_url}" >> $GITHUB_OUTPUT
    echo "BUILD_STORAGE_USE=${total_storage_used}" >> $GITHUB_OUTPUT
    echo "BUILD_STORAGE_USE_EXCL_FRAMEWORK=${total_storage_used_without_framework}" >> $GITHUB_OUTPUT
    
    conclusion_msg="Build completed - continuing with the workflow's next step."
fi

#=================================================
# CONCLUDE
#=================================================
# End debug output tracing 
set +x

# Final status
if [ -n "$conclusion_msg" ]; then
    echo $conclusion_msg
    if [[ $conclusion_msg == *"fail"* ]]; then
        exit 1
    else
        exit 0
    fi
else
    echo "Error in the build script"
    exit 1
fi
