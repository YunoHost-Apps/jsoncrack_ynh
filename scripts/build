#!/bin/bash

#=================================================
# BUILD SCRIPT RESOURCES USAGE:
# Up to 1.5GB disk space and 4GB RAM. 
#=================================================

set -x

upstream_owner="AykutSarac"
upstream_repo="jsoncrack.com"
ynh_owner="Yunohost-Apps"
ynh_repo="jsoncrack_ynh"
build_node_version=20

#Fill with Github Personal Token to upload release after build (not required if build is part of a Github workflow) - https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/managing-your-personal-access-tokens
gh_personal_token="" 

#=================================================
# DOWNLOAD AND EXTRACT SOURCE
#=================================================
last_upstream_version=$(curl --silent "https://api.github.com/repos/${upstream_owner}/${upstream_repo}/releases/latest" | grep -Po "(?<=\"tag_name\": \").*(?=\")")
build_folder="${upstream_repo}_${last_upstream_version}"
curl -LJ "https://api.github.com/repos/${upstream_owner}/${upstream_repo}/tarball/${last_upstream_version}" --output "${build_folder}.tar.gz"
mkdir "$build_folder"
tar --strip-components=1 -xvf "${build_folder}.tar.gz" -C "./${build_folder}/"

# Adapt for YNH context and remove calls for upgrading to premium (support encouraged via 'fund' parameter in the manifest.toml)
    # Fix upstream issues
    sed -i '1 i import dynamic from "next/dynamic";' "$install_dir/src/containers/Editor/components/views/GraphView/lib/utils/getNodePath.ts" # add first line
    sed -i "/const config = {/a \ \ experimental: { esmExternals: 'loose'}," "$install_dir/next.config.js"
    #~ sed -i "/require(\"reaflow\"/c\  const getParentsForNodeId = async () => { const mod = await import('reaflow'); return mod.default; };" "$install_dir/src/containers/Editor/components/views/GraphView/lib/utils/getNodePath.ts" # replace full line
    sed -i "/esModuleInterop/a \ \ \ \ \"allowSyntheticDefaultImports\": true," "$install_dir/tsconfig.json"
    #~ sed -i "/require(\"reaflow\"/c\  const getParentsForNodeId = dynamic(() => import(\"reaflow\").then(c => c.getParentsForNodeId), { ssr:false });" "$install_dir/src/containers/Editor/components/views/GraphView/lib/utils/getNodePath.ts" # replace full line
    sed -i "/require(\"reaflow\"/c\  const getParentsForNodeId = dynamic(() => import(\"reaflow\"), { ssr:false });" "$install_dir/src/containers/Editor/components/views/GraphView/lib/utils/getNodePath.ts" # replace full line
    #~ ynh_replace --match="require(\"reaflow" --replace="await import(\"reaflow" --file="$install_dir/src/containers/Editor/components/views/GraphView/lib/utils/getNodePath.ts"
    #~ ynh_replace --match="require(\"reaflow" --replace="const getParentsForNodeId = dynamic(() => import(\"reaflow\").then(c => c.getParentsForNodeId), { ssr:false });" --file="$install_dir/src/containers/Editor/components/views/GraphView/lib/utils/getNodePath.ts"
    ynh_replace --match="ToDiagram" --replace="JSON Crack" --file="$install_dir/src/pages/404.tsx" # Page title
    ynh_replace --match="ToDiagram" --replace="JSON Crack" --file="$install_dir/src/pages/_error.tsx" # Page title
    sed -i "/\"build\"/c\    \"build\": \"next build --debug\"," "$install_dir/package.json" 
    #const getParentsForNodeId = dynamic(() => import("reaflow").then(c => c.getParentsForNodeId), { 
		#ssr:false 
	#});
	
    # Remove premium 
    ynh_config_add --template="index.tsx" --destination="$install_dir/src/containers/Toolbar/index.tsx"                      # Remove calls for premium and signup page   
    ynh_config_add --template="OptionsMenu.tsx" --destination="$install_dir/src/containers/Toolbar/OptionsMenu.tsx"          # Remove listed premium options
    ynh_config_add --template="ToolsMenu.tsx" --destination="$install_dir/src/containers/Toolbar/indexToolsMenutsx"          # Remove listed premium options
    sed -i '/ExternalMode/d' "$install_dir/src/pages/editor.tsx"                                                             # Remove call for premium when executed not from official domain
    sed -Ei '/if \(aboveSupportedLimit\) \{/,+3 d' "$install_dir/src/containers/Editor/components/views/GraphView/index.tsx" # Remove call for premium when reaching a graph limitation (full block to avoid compilation error)
    sed -i '/SUPPORTED_LIMIT/d' "$install_dir/src/containers/Editor/components/views/GraphView/index.tsx"                    # Remove call for premium when reaching a graph limitation (var declaration to avoid compilation error) 
    
    # SEO
    ynh_config_add --template="sitemap.txt" --destination="$install_dir/public/sitemap.txt"
    ynh_config_add --template="robot.txt" --destination="$install_dir/public/robot.txt"
    ynh_replace --match="https://jsoncrack.com" --replace="https://$domain$path" --file="$install_dir/src/constants/seo.ts"               # Change asset URL    
    ynh_replace --match="https://jsoncrack.com/editor" --replace="https://$domain$path/editor" --file="$install_dir/src/pages/editor.tsx" # Change cannonical URL   
    
    # Adapt text for YNH context
    ynh_replace --match="jsoncrack.com" --replace="JSON_graph" --file="$install_dir/src/containers/Modals/DownloadModal/index.tsx"                    # Default download filename  
    sed -i '/already notified/d' "$install_dir/src/pages/_error.tsx"                                                                                  # Delete deceptive speech now Sentry is going to be disabled 
    ynh_replace --match="Don&apos;t worry, our development team was" --replace="Try refreshing the page." --file="$install_dir/src/pages/_error.tsx"  # Delete deceptive speech now Sentry is going to be disabled 
    
    # Remove Google Analytics (user tracking)
    sed -i '/nextjs-google-analytics/d' "$install_dir/package.json"
    sed -i '/GoogleAnalytics/d' "$install_dir/src/pages/_app.tsx"
    sed -Ei '/IS_PROD/,+1 d' "$install_dir/src/pages/_app.tsx"
    ynh_replace --match=" onClick={() => gaEvent(\"show_tools_menu\")}" --replace="" --file="$install_dir/src/containers/Toolbar/ToolsMenu.tsx" # Delete part of line containing 'gaEvent'
    ynh_replace --match=" onClick={() => gaEvent(\"show_view_menu\")}" --replace="" --file="$install_dir/src/containers/Toolbar/ViewMenu.tsx"   # Delete part of line containing 'gaEvent'
    ynh_replace --match=" onClick={() => gaEvent(\"show_zoom_menu\")}" --replace="" --file="$install_dir/src/containers/Toolbar/ZoomMenu.tsx"   # Delete part of line containing 'gaEvent'
    gaEvent_list=$(grep -rl 'gaEvent' "$install_dir/src") && echo $gaEvent_list | xargs sed -i '/gaEvent/d'                                     # Delete lines containing 'gaEvent' for files located in src/*

    # Disable Sentry (error tracking linked to the app's official instance)
    ynh_config_add --template="sentry.client.config.ts" --destination="$install_dir/sentry.client.config.ts"

    #~ # Remove Sentry (error tracking)
    #~ sed -i '/sentry/d' "$install_dir/package.json"
    #~ sed -i '/@sentry/d' "$install_dir/next.config.js"
    #~ sed -i '/const sentryConfig/,+14d' "$install_dir/next.config.js"
    #~ sed -i 's/sentryConfig/""/' "$install_dir/next.config.js"
    #~ sed -i '/Sentry/d' "$install_dir/src/data/terms.json"
    #~ rm "$install_dir/sentry.client.config.ts"
    #~ rm "$install_dir/sentry.edge.config.ts"

# Copy node package files in build directory 
cp "$install_dir/package.json" "$install_dir/src/package.json" 
cp "$install_dir/pnpm-lock.yaml" "$install_dir/src/pnpm-lock.yaml" 

# Overwrite upstream's environement variables
ynh_config_add --template=".env" --destination="$install_dir/.env"

chown -R "$app:www-data" "$install_dir"

#=================================================
# BUILD
#=================================================
ynh_archive_name="${build_folder}_ynh.zip"
pushd "$build_folder"
    # Call NVM if expected node version differs form current node version
    current_node_version=$(node -v | cut -c 2- | cut -c 1-${#build_node_version})
    if [ "$current_node_version" != "$build_node_version" ]; then
        if [ -f ~/.nvm/nvm.sh ]; then
            source ~/.nvm/nvm.sh install $build_node_version
        else
            echo "Current Node.js version ($current_node_version) not matching building requirement ($build_node_version). Please install expected Node.js version or Node Version Manager (nvm)"
        fi
    fi

    # Actual build instructions
pushd "$install_dir/src"
    corepack enable
    ynh_exec_as_app corepack enable pnpm
    ynh_exec_as_app corepack use pnpm@latest
    ynh_hide_warnings ynh_exec_as_app pnpm install --config.confirmModulesPurge=false --frozen-lockfile
    #~ ynh_hide_warnings ynh_exec_as_app NODE_OPTIONS="--max-old-space-size=1536" pnpm install --config.confirmModulesPurge=false
    ynh_hide_warnings ynh_exec_as_app tar -cf parent.tar ../ && tar -xf parent.tar
    #for i in ../*; do [ "$i" != "../src" ] && cp -r "$i" . ; done  # copy all parents files and folder from $install_dir to $install_dir/src except /src
    chown -R "$app:www-data" .
    rm ../.eslintrc.json
    ynh_hide_warnings ynh_exec_as_app COREPACK_ENABLE_DOWNLOAD_PROMPT=0 pnpm exec next telemetry disable
    ynh_hide_warnings ynh_exec_as_app pnpm run lint:fix
    ynh_hide_warnings ynh_exec_as_app pnpm run build
popd

    # Package
    mv "dist" "${ynh_repo}"
    zip -r $ynh_archive_name "${ynh_repo}"
    mv $ynh_archive_name "../${ynh_archive_name}"
popd

#=================================================
# CLEAN BUILD FOLDER
#=================================================
rm -r "${build_folder}"
rm "${build_folder}.tar.gz"

#=================================================
# UPLOAD RELEASE
#=================================================

# Upload with Github Personal Token (local build, i.e. not running a Github Workflow)
if [[ $gh_personal_token && -z $GITHUB_OUTPUT ]]; then
    
    echo "Trying to upload the release to https://github.com/${ynh_owner}/${ynh_repo}/releases/ ..."

    sha256sumarchive=$(sha256sum "$ynh_archive_name" | cut -d' ' -f1)

    if [[ "$@" =~ "push_release" ]]
    then
        ## Make a draft release json with a markdown body
        release='"tag_name": "'$last_upstream_version'", "target_commitish": "master", "name": "'$last_upstream_version'", '
        body="${upstream_repo^} prebuilt archive for ${ynh_repo}\\n=========\\nPlease refer to upstream ${upstream_repo^} project for the change : https://github.com/$upstream_owner/$upstream_repo/releases\\n\\nSha256sum : $sha256sumarchive"
        body=\"$body\"
        body='"body": '$body', '
        release=$release$body
        release=$release'"draft": true, "prerelease": false'
        release='{'$release'}'
        url="https://api.github.com/repos/$ynh_owner/$ynh_repo/releases"
        succ=$(curl -H "Authorization: token $gh_personal_token" --data "$release" $url)

        ## In case of success, we upload a file
        upload_generic=$(echo "$succ" | grep upload_url)
        if [[ $? -eq 0 ]]; then
            echo "Release created."
        else
            echo "Error creating release!"
            return
        fi

        # $upload_generic is like:
        # "upload_url": "https://uploads.github.com/repos/:owner/:repo/releases/:ID/assets{?name,label}",
        upload_prefix=$(echo $upload_generic | cut -d "\"" -f4 | cut -d "{" -f1)
        upload_file="$upload_prefix?name=$ynh_archive_name"

        echo "Start uploading first file"
        i=0
        upload_ok=false
        while [ $i -le 4 ]; do
            i=$((i+1))
            # Download file
            set +e
            succ=$(curl -H "Authorization: token $gh_personal_token" \
                -H "Content-Type: $(file -b --mime-type $ynh_archive_name)" \
                -H "Accept: application/vnd.github.v3+json" \
                --data-binary @$ynh_archive_name $upload_file)
            res=$?
            set -e
            if [ $res -ne 0 ]; then
                echo "Curl upload failled"
                continue
            fi
            echo "Upload done, check result"

            set +eu
            download=$(echo "$succ" | egrep -o "browser_download_url.+?")
            res=$?
            if [ $res -ne 0 ] || [ -z "$download" ]; then
                set -eu
                echo "Result upload error"
                continue
            fi
            set -eu
            echo "$download" | cut -d: -f2,3 | cut -d\" -f2
            echo "Upload OK"
            upload_ok=true
            break
        done
        
        set +x  

        if ! $upload_ok; then
            echo "Upload completely failed, exit"
            exit 1
        fi
    fi

    exit 0

# Script run with Github Workflow or with empty $gh_personal_token
else
    if [[ $GITHUB_OUTPUT ]]; then echo "YNH_ARCHIVE=${ynh_archive_name}" >> $GITHUB_OUTPUT; fi #export var for Github Workflow
    echo "Build completed but not uploaded - missing Github Token"
    set +x 
fi
