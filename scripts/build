#!/bin/bash

#=================================================
# BUILD SCRIPT RESOURCES USAGE:
# Up to 1.5GB disk space and 4GB RAM. 
#=================================================

set -x

upstream_owner="AykutSarac"
upstream_repo="jsoncrack.com"
upstream_branch="main"
ynh_owner="Yunohost-Apps"
ynh_repo="jsoncrack_ynh"
build_node_version=20
source_type="commit" # 'commit' or 'release'
default_build_folder="out" # often 'dist'

#Fill with Github Personal Token to upload release after build (not required if build is part of a Github workflow) - https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/managing-your-personal-access-tokens
gh_personal_token="" 

#=================================================
# DOWNLOAD AND EXTRACT SOURCE
#=================================================
if [[ $source_type == "release" ]]; then
    last_upstream_version=$(curl --silent "https://api.github.com/repos/${upstream_owner}/${upstream_repo}/releases/latest" | grep -Po "(?<=\"tag_name\": \").*(?=\")")
    download_url="https://api.github.com/repos/${upstream_owner}/${upstream_repo}/tarball/${last_upstream_version}"
    build_folder="${upstream_repo}_${last_upstream_version}"
else
    last_upstream_version=$(curl --silent "https://api.github.com/repos/${upstream_owner}/${upstream_repo}/commits/${upstream_branch}" | grep -Po "(?<=\"sha\": \").*(?=\")" | head -n 1) #e.g. d5f9bfc7fba1f1908863390f16ba28589d84a7d5
    last_upstream_version_short=${last_upstream_version:0:8}
    last_date_tag=$(curl --silent "https://api.github.com/repos/${upstream_owner}/${upstream_repo}/commits/${upstream_branch}" | grep -Po "(?<=\"verified_at\": \").*(?=\")" | head -n 1) #e.g. 2024-11-19T18:37:03Z
    last_date_tag_short=$(echo ${last_date_tag:0:10} | sed 's/-/./g') #e.g. 2024.11.19
    download_url="https://github.com/${upstream_owner}/${upstream_repo}/archive/${last_upstream_version}.tar.gz"
    build_folder="${upstream_repo}_v${last_date_tag_short}_${last_upstream_version_short}" #e.g. jsoncrack.com_v.2024.11.19-d5f9bfc7
fi
curl -LJ $download_url --output "${build_folder}.tar.gz"
mkdir "$build_folder"
tar --strip-components=1 -xvf "${build_folder}.tar.gz" -C "./${build_folder}/"

# Adapt for YNH context and remove calls for upgrading to premium (support encouraged via 'fund' parameter in the manifest.toml)
pushd "$build_folder"
    # Remove calls to premium 
    sed -i '/AccountMenu/d' "./src/containers/Toolbar/index.tsx"
    sed -i '/{!isWidget/{:Loop;N;/\n\s*)}/!bLoop;/upgrade/d}' "./src/containers/Toolbar/index.tsx"                      # Remove call to Premium (removes block delimited with START='{!isWidget' and END='\n\s*)}' which contains TARGET='upgrade'). 
    sed -i '/<Menu\.Item/{:Loop;N;/\n\s*<\/Menu\.Item>/!bLoop;/upgrade/d}' "./src/containers/Toolbar/OptionsMenu.tsx"   # Remove listed premium options (removes all blocks delimited with START='<Menu\.Item' and END='\n\s*<\/Menu\.Item>' which contains TARGET='upgrade'). 
    sed -i '/const setVisible/d' "./src/containers/Toolbar/OptionsMenu.tsx"                                             # Remove related const declaration to avoid lint error
    sed -i '/<Menu\.Item/{:Loop;N;/\n\s*<\/Menu\.Item>/!bLoop;/upgrade/d}' "./src/containers/Toolbar/ToolsMenu.tsx"     # Remove listed premium options (removes all blocks delimited with START='<Menu\.Item' and END='\n\s*<\/Menu\.Item>' which contains TARGET='upgrade'). 
    sed -i '/<Button/{:Loop;N;/\n\s*<\/Button>/!bLoop;/upgrade/d}' "./src/containers/Modals/NodeModal/index.tsx"        # Remove listed premium options (removes all blocks delimited with START='<Button' and END='\n\s*</Button>' which contains TARGET='upgrade'). 
    sed -i '/const setVisible/d' "./src/containers/Modals/NodeModal/index.tsx"                                          # Remove related const declaration to avoid lint error
    sed -i 's/Cookie.get("upgrade_shown")/true/g' "./src/pages/editor.tsx"                                              # Remove call for premium when opened for the first time or after cookie expiry
    sed -i '/ExternalMode/d' "./src/pages/editor.tsx"                                                                   # Remove call for premium when executed not from official domain
    sed -i '/if (aboveSupportedLimit) {/,/}/d' "./src/containers/Editor/components/views/GraphView/index.tsx"           # Remove call for premium when reaching a graph limitation (full block to avoid compilation error)
    sed -i '/SUPPORTED_LIMIT/d' "./src/containers/Editor/components/views/GraphView/index.tsx"                          # Remove call for premium when reaching a graph limitation (var declaration to avoid compilation error) 
    
    # Prepare $domain$path replacement
    sed -i '/const config/a \ \ basePath: "\/__YNH_SUBDIR_PATH__",' "./next.config.js"
    sed -i 's/\/editor/\/__YNH_SUBDIR_PATH__\/editor"/g' "./public/manifest.json"
    sed -i 's/assets/\/__YNH_SUBDIR_PATH__\/assets"/g' "./public/manifest.json"
    sed -i 's/jsoncrack.com/__YNH_DOMAIN____YNH_SUBDIR_PATH__/g' "./src/constants/seo.ts"
    sed -i 's/"\/manifest.json"/"\/__YNH_SUBDIR_PATH__\/manifest.json"/g' "./src/constants/seo.ts"
    sed -i 's/"\/favicon.ico"/"\/__YNH_SUBDIR_PATH__\/favicon.ico"/g' "./src/constants/seo.ts"
    sed -i 's/Link href="\/"/Link href="\/"/g' "./src/layout/JsonCrackLogo.tsx"
    sed -i 's/"\/assets/"__YNH_SUBDIR_PATH__\/assets/g' "./src/containers/Editor/components/LiveEditor.tsx"
    sed -i 's/"\/assets/"__YNH_SUBDIR_PATH__\/assets/g' "./src/containers/Editor/components/views/GraphView/index.tsx"
    sed -i 's/"\/assets/"__YNH_SUBDIR_PATH__\/assets/g' "./src/layout/JsonCrackLogo.tsx"
    
    # Adapt text for YNH context
    sed -i 's/jsoncrack.com/JSON_graph/g' "./src/containers/Modals/DownloadModal/index.tsx"                    # Default download filename  
    sed -i '/already notified/d' "./src/pages/_error.tsx"                                                      # Delete deceptive speech now Sentry is going to be disabled 
    sed -i 's/Don&apos;t worry, our development team was/Try refreshing the page./g' "./src/pages/_error.tsx"  # Delete deceptive speech now Sentry is going to be disabled 
    
    # Remove Google Analytics (user tracking)
    sed -i '/NEXT_PUBLIC_GA_MEASUREMENT_ID/d' "./.env"
    sed -i '/nextjs-google-analytics/d' "./package.json"
    sed -i '/GoogleAnalytics/d' "./src/pages/_app.tsx"
    sed -Ei '/IS_PROD/,+1 d' "./src/pages/_app.tsx"
    sed -i 's/ onClick={() => gaEvent("show_tools_menu")}//g' "./src/containers/Toolbar/ToolsMenu.tsx"  # Delete part of line containing 'gaEvent'
    sed -i 's/ onClick={() => gaEvent("show_view_menu")}//g' "./src/containers/Toolbar/ViewMenu.tsx"    # Delete part of line containing 'gaEvent'
    sed -i 's/ onClick={() => gaEvent("show_zoom_menu")}//g' "./src/containers/Toolbar/ZoomMenu.tsx"    # Delete part of line containing 'gaEvent'
    gaEvent_list=$(grep -rl 'gaEvent' "./src") && echo $gaEvent_list | xargs sed -i '/gaEvent/d'        # Delete complete lines containing 'gaEvent' for files located in src/*

    # Disable Sentry (error tracking linked to the app's official instance) --> Doesn't seem enough to avoid calls to Sentry's website so we prefer to remove completely for now
    #~ sed -i 's/process.env.NODE_ENV === "production"/false/g' "./sentry.client.config.ts"

    # Remove Sentry (error tracking)
    sed -i '/sentry/d' "./package.json"
    sed -i '/@sentry/d' "./next.config.js"
    sed -i '/const sentryConfig/,+14d' "./next.config.js"
    sed -i 's/sentryConfig/bundleAnalyzerConfig/' "./next.config.js"
    sed -i '/Sentry/d' "./src/data/terms.json"
    rm "./sentry.client.config.ts"
    rm "./sentry.edge.config.ts"
popd

#=================================================
# BUILD
#=================================================
ynh_archive_name="${build_folder}_ynh.zip"
pushd "$build_folder"
    # Call NVM if expected node version differs form current node version
    current_node_version=$(node -v | cut -c 2- | cut -c 1-${#build_node_version})
    if [ "$current_node_version" != "$build_node_version" ]; then
        if [ -f ~/.nvm/nvm.sh ]; then
            source ~/.nvm/nvm.sh install $build_node_version
        else
            echo "Current Node.js version ($current_node_version) not matching building requirement ($build_node_version). Please install expected Node.js version or Node Version Manager (nvm)"
        fi
    fi
    
    # Actual build instructions
    corepack enable pnpm && pnpm install --no-frozen-lockfile
    COREPACK_ENABLE_DOWNLOAD_PROMPT=0 pnpm exec next telemetry disable
    pnpm run lint:fix
    pnpm run build

    # Package   
    mv "${default_build_folder}" "${ynh_repo}"
    zip -r $ynh_archive_name "${ynh_repo}"
    mv $ynh_archive_name "../${ynh_archive_name}"
popd

#=================================================
# CLEAN BUILD FOLDER
#=================================================
rm -r "${build_folder}"
rm "${build_folder}.tar.gz"

#=================================================
# UPLOAD RELEASE
#=================================================

# Upload with Github Personal Token (local build, i.e. not running a Github Workflow)
if [[ $gh_personal_token && -z $GITHUB_OUTPUT ]]; then
    
    echo "Trying to upload the release to https://github.com/${ynh_owner}/${ynh_repo}/releases/ ..."

    sha256sumarchive=$(sha256sum "$ynh_archive_name" | cut -d' ' -f1)

    if [[ "$@" =~ "push_release" ]]
    then
        ## Make a draft release json with a markdown body
        release='"tag_name": "'$last_upstream_version'", "target_commitish": "master", "name": "'$last_upstream_version'", '
        body="${upstream_repo^} prebuilt archive for ${ynh_repo}\\n=========\\nPlease refer to upstream ${upstream_repo^} project for the change : https://github.com/$upstream_owner/$upstream_repo/releases\\n\\nSha256sum : $sha256sumarchive"
        body=\"$body\"
        body='"body": '$body', '
        release=$release$body
        release=$release'"draft": true, "prerelease": false'
        release='{'$release'}'
        url="https://api.github.com/repos/$ynh_owner/$ynh_repo/releases"
        succ=$(curl -H "Authorization: token $gh_personal_token" --data "$release" $url)

        ## In case of success, we upload a file
        upload_generic=$(echo "$succ" | grep upload_url)
        if [[ $? -eq 0 ]]; then
            echo "Release created."
        else
            echo "Error creating release!"
            return
        fi

        # $upload_generic is like:
        # "upload_url": "https://uploads.github.com/repos/:owner/:repo/releases/:ID/assets{?name,label}",
        upload_prefix=$(echo $upload_generic | cut -d "\"" -f4 | cut -d "{" -f1)
        upload_file="$upload_prefix?name=$ynh_archive_name"

        echo "Start uploading first file"
        i=0
        upload_ok=false
        while [ $i -le 4 ]; do
            i=$((i+1))
            # Download file
            set +e
            succ=$(curl -H "Authorization: token $gh_personal_token" \
                -H "Content-Type: $(file -b --mime-type $ynh_archive_name)" \
                -H "Accept: application/vnd.github.v3+json" \
                --data-binary @$ynh_archive_name $upload_file)
            res=$?
            set -e
            if [ $res -ne 0 ]; then
                echo "Curl upload failled"
                continue
            fi
            echo "Upload done, check result"

            set +eu
            download=$(echo "$succ" | egrep -o "browser_download_url.+?")
            res=$?
            if [ $res -ne 0 ] || [ -z "$download" ]; then
                set -eu
                echo "Result upload error"
                continue
            fi
            set -eu
            echo "$download" | cut -d: -f2,3 | cut -d\" -f2
            echo "Upload OK"
            upload_ok=true
            break
        done
        
        set +x  

        if ! $upload_ok; then
            echo "Upload completely failed, exit"
            exit 1
        fi
    fi

    exit 0

# Script run with Github Workflow or with empty $gh_personal_token
else
    if [[ $GITHUB_OUTPUT ]]; then echo "YNH_ARCHIVE=${ynh_archive_name}" >> $GITHUB_OUTPUT; fi #export var for Github Workflow
    echo "Build completed but not uploaded - missing Github Token"
    set +x 
fi
